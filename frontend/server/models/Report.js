// models/reportModel.js
import mongoose from 'mongoose';

const reportSchema = new mongoose.Schema({
  reportTitle: {
    type: String,
    required: [true, 'Report title is required'],
    trim: true,
    maxlength: [200, 'Report title cannot exceed 200 characters']
  },
  
  reportType: {
    type: String,
    required: [true, 'Report type is required'],
    enum: {
      values: [
        'employee_performance',
        'attendance',
        'leave_summary',
        'department',
        'salary',
        'custom'
      ],
      message: '{VALUE} is not a valid report type'
    }
  },
  
  description: {
    type: String,
    trim: true,
    maxlength: [500, 'Description cannot exceed 500 characters']
  },

  filters: {
    startDate: { type: Date, default: null },
    endDate: { type: Date, default: null },
    department: { type: String, trim: true, default: null },
    employeeId: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: 'Employee', 
      default: null 
    },
    status: {
      type: String,
      enum: ['active', 'inactive', 'pending', 'approved', 'rejected', null],
      default: null
    }
  },

  reportData: {
    type: mongoose.Schema.Types.Mixed,
    default: {}
  },

  summary: {
    totalRecords: {
      type: Number,
      default: 0,
      min: [0, 'Total records cannot be negative']
    },
    metrics: {
      type: Map,
      of: mongoose.Schema.Types.Mixed,
      default: new Map()
    }
  },

  generatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: [true, 'Generated by field is required']
  },
  
  generatedAt: {
    type: Date,
    default: Date.now,
    index: true
  },

  status: {
    type: String,
    enum: {
      values: ['pending', 'completed', 'failed'],
      message: '{VALUE} is not a valid status'
    },
    default: 'completed'
  },

  format: {
    type: String,
    enum: {
      values: ['json', 'pdf', 'excel', 'csv'],
      message: '{VALUE} is not a valid format'
    },
    default: 'json'
  },

  tags: [{
    type: String,
    trim: true,
    lowercase: true
  }],

  isPublic: {
    type: Boolean,
    default: false
  },

  isDeleted: {
    type: Boolean,
    default: false
  },
  
  deletedAt: {
    type: Date,
    default: null
  }
}, {
  timestamps: true
});

// Indexes
reportSchema.index({ reportType: 1, generatedAt: -1 });
reportSchema.index({ generatedBy: 1 });
reportSchema.index({ status: 1, isDeleted: 1 });
reportSchema.index({ 'filters.startDate': 1, 'filters.endDate': 1 });

// Virtual for date range
reportSchema.virtual('dateRange').get(function() {
  if (this.filters.startDate && this.filters.endDate) {
    const start = this.filters.startDate;
    const end = this.filters.endDate;
    const duration = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
    return { start, end, duration: duration + 1 };
  }
  return null;
});

// Method to soft delete
reportSchema.methods.softDelete = async function() {
  this.isDeleted = true;
  this.deletedAt = new Date();
  return await this.save();
};

// Method to restore
reportSchema.methods.restore = async function() {
  this.isDeleted = false;
  this.deletedAt = null;
  return await this.save();
};

// Static method
reportSchema.statics.getReportTypeLabel = function(type) {
  const labels = {
    'employee_performance': 'Employee Performance',
    'attendance': 'Attendance Report',
    'leave_summary': 'Leave Summary',
    'department': 'Department Report',
    'salary': 'Salary/Payroll Report',
    'custom': 'Custom Report'
  };
  return labels[type] || type;
};

// Pre-find middleware
reportSchema.pre(/^find/, function(next) {
  if (!this.getQuery().isDeleted) {
    this.where({ isDeleted: { $ne: true } });
  }
  next();
});

const Report = mongoose.model('Report', reportSchema);

export default Report;
